# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Action {
  Notification(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  _count: ActionCount
  createdAt: DateTime!
  group: ActionGroup!
  id: ID!
  name: ActionName!
  targetId: String!
  targetType: ActionTargetType!
}

type ActionCount {
  Notification: Int!
}

type ActionCountAggregate {
  _all: Int!
  createdAt: Int!
  group: Int!
  id: Int!
  name: Int!
  targetId: Int!
  targetType: Int!
}

input ActionCountOrderByAggregateInput {
  createdAt: SortOrder
  group: SortOrder
  id: SortOrder
  name: SortOrder
  targetId: SortOrder
  targetType: SortOrder
}

input ActionCreateInput {
  Notification: NotificationCreateNestedManyWithoutActionInput
  createdAt: DateTime
  group: ActionGroup!
  id: String
  name: ActionName!
  targetId: String!
  targetType: ActionTargetType!
}

input ActionCreateManyInput {
  createdAt: DateTime
  group: ActionGroup!
  id: String
  name: ActionName!
  targetId: String!
  targetType: ActionTargetType!
}

input ActionCreateNestedOneWithoutNotificationInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutNotificationInput
  create: ActionCreateWithoutNotificationInput
}

input ActionCreateOrConnectWithoutNotificationInput {
  create: ActionCreateWithoutNotificationInput!
  where: ActionWhereUniqueInput!
}

input ActionCreateWithoutNotificationInput {
  createdAt: DateTime
  group: ActionGroup!
  id: String
  name: ActionName!
  targetId: String!
  targetType: ActionTargetType!
}

enum ActionGroup {
  COMMENT
  TASK
}

type ActionGroupBy {
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
  createdAt: DateTime!
  group: ActionGroup!
  id: String!
  name: ActionName!
  targetId: String!
  targetType: ActionTargetType!
}

type ActionMaxAggregate {
  createdAt: DateTime
  group: ActionGroup
  id: String
  name: ActionName
  targetId: String
  targetType: ActionTargetType
}

input ActionMaxOrderByAggregateInput {
  createdAt: SortOrder
  group: SortOrder
  id: SortOrder
  name: SortOrder
  targetId: SortOrder
  targetType: SortOrder
}

type ActionMinAggregate {
  createdAt: DateTime
  group: ActionGroup
  id: String
  name: ActionName
  targetId: String
  targetType: ActionTargetType
}

input ActionMinOrderByAggregateInput {
  createdAt: SortOrder
  group: SortOrder
  id: SortOrder
  name: SortOrder
  targetId: SortOrder
  targetType: SortOrder
}

enum ActionName {
  COMMENT_CREATE
  COMMENT_DELETE
  COMMENT_UPDATE
  TASK_CREATE
  TASK_DELETE
  TASK_UPDATE
}

input ActionOrderByWithAggregationInput {
  _count: ActionCountOrderByAggregateInput
  _max: ActionMaxOrderByAggregateInput
  _min: ActionMinOrderByAggregateInput
  createdAt: SortOrder
  group: SortOrder
  id: SortOrder
  name: SortOrder
  targetId: SortOrder
  targetType: SortOrder
}

input ActionOrderByWithRelationInput {
  Notification: NotificationOrderByRelationAggregateInput
  createdAt: SortOrder
  group: SortOrder
  id: SortOrder
  name: SortOrder
  targetId: SortOrder
  targetType: SortOrder
}

input ActionRelationFilter {
  is: ActionWhereInput
  isNot: ActionWhereInput
}

enum ActionScalarFieldEnum {
  createdAt
  group
  id
  name
  targetId
  targetType
}

input ActionScalarWhereWithAggregatesInput {
  AND: [ActionScalarWhereWithAggregatesInput!]
  NOT: [ActionScalarWhereWithAggregatesInput!]
  OR: [ActionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  group: EnumActionGroupWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: EnumActionNameWithAggregatesFilter
  targetId: StringWithAggregatesFilter
  targetType: EnumActionTargetTypeWithAggregatesFilter
}

enum ActionTargetType {
  CREATE
  DELETE
  UPDATE
}

input ActionUpdateInput {
  Notification: NotificationUpdateManyWithoutActionNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  group: EnumActionGroupFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: EnumActionNameFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  targetType: EnumActionTargetTypeFieldUpdateOperationsInput
}

input ActionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  group: EnumActionGroupFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: EnumActionNameFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  targetType: EnumActionTargetTypeFieldUpdateOperationsInput
}

input ActionUpdateOneRequiredWithoutNotificationNestedInput {
  connect: ActionWhereUniqueInput
  connectOrCreate: ActionCreateOrConnectWithoutNotificationInput
  create: ActionCreateWithoutNotificationInput
  update: ActionUpdateWithoutNotificationInput
  upsert: ActionUpsertWithoutNotificationInput
}

input ActionUpdateWithoutNotificationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  group: EnumActionGroupFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: EnumActionNameFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  targetType: EnumActionTargetTypeFieldUpdateOperationsInput
}

input ActionUpsertWithoutNotificationInput {
  create: ActionCreateWithoutNotificationInput!
  update: ActionUpdateWithoutNotificationInput!
}

input ActionWhereInput {
  AND: [ActionWhereInput!]
  NOT: [ActionWhereInput!]
  Notification: NotificationListRelationFilter
  OR: [ActionWhereInput!]
  createdAt: DateTimeFilter
  group: EnumActionGroupFilter
  id: StringFilter
  name: EnumActionNameFilter
  targetId: StringFilter
  targetType: EnumActionTargetTypeFilter
}

input ActionWhereUniqueInput {
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAction {
  _count: ActionCountAggregate
  _max: ActionMaxAggregate
  _min: ActionMinAggregate
}

type AggregateAssignee {
  _count: AssigneeCountAggregate
  _max: AssigneeMaxAggregate
  _min: AssigneeMinAggregate
}

type AggregateComment {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
}

type AggregateNotification {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
}

type AggregateTask {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type Assignee {
  createdAt: DateTime!
  id: ID!
  task: Task!
  taskId: String!
  user: User!
  userId: String!
}

type AssigneeCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  taskId: Int!
  userId: Int!
}

input AssigneeCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  taskId: SortOrder
  userId: SortOrder
}

input AssigneeCreateInput {
  createdAt: DateTime
  id: String
  task: TaskCreateNestedOneWithoutAssigneeInput!
  user: UserCreateNestedOneWithoutAssigneeInput!
}

input AssigneeCreateManyInput {
  createdAt: DateTime
  id: String
  taskId: String!
  userId: String!
}

input AssigneeCreateManyTaskInput {
  createdAt: DateTime
  id: String
  userId: String!
}

input AssigneeCreateManyTaskInputEnvelope {
  data: [AssigneeCreateManyTaskInput!]!
  skipDuplicates: Boolean
}

input AssigneeCreateManyUserInput {
  createdAt: DateTime
  id: String
  taskId: String!
}

input AssigneeCreateManyUserInputEnvelope {
  data: [AssigneeCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AssigneeCreateNestedManyWithoutTaskInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutTaskInput!]
  create: [AssigneeCreateWithoutTaskInput!]
  createMany: AssigneeCreateManyTaskInputEnvelope
}

input AssigneeCreateNestedManyWithoutUserInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutUserInput!]
  create: [AssigneeCreateWithoutUserInput!]
  createMany: AssigneeCreateManyUserInputEnvelope
}

input AssigneeCreateOrConnectWithoutTaskInput {
  create: AssigneeCreateWithoutTaskInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeCreateOrConnectWithoutUserInput {
  create: AssigneeCreateWithoutUserInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeCreateWithoutTaskInput {
  createdAt: DateTime
  id: String
  user: UserCreateNestedOneWithoutAssigneeInput!
}

input AssigneeCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  task: TaskCreateNestedOneWithoutAssigneeInput!
}

type AssigneeGroupBy {
  _count: AssigneeCountAggregate
  _max: AssigneeMaxAggregate
  _min: AssigneeMinAggregate
  createdAt: DateTime!
  id: String!
  taskId: String!
  userId: String!
}

input AssigneeListRelationFilter {
  every: AssigneeWhereInput
  none: AssigneeWhereInput
  some: AssigneeWhereInput
}

type AssigneeMaxAggregate {
  createdAt: DateTime
  id: String
  taskId: String
  userId: String
}

input AssigneeMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  taskId: SortOrder
  userId: SortOrder
}

type AssigneeMinAggregate {
  createdAt: DateTime
  id: String
  taskId: String
  userId: String
}

input AssigneeMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  taskId: SortOrder
  userId: SortOrder
}

input AssigneeOrderByRelationAggregateInput {
  _count: SortOrder
}

input AssigneeOrderByWithAggregationInput {
  _count: AssigneeCountOrderByAggregateInput
  _max: AssigneeMaxOrderByAggregateInput
  _min: AssigneeMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  taskId: SortOrder
  userId: SortOrder
}

input AssigneeOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  task: TaskOrderByWithRelationInput
  taskId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum AssigneeScalarFieldEnum {
  createdAt
  id
  taskId
  userId
}

input AssigneeScalarWhereInput {
  AND: [AssigneeScalarWhereInput!]
  NOT: [AssigneeScalarWhereInput!]
  OR: [AssigneeScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  taskId: StringFilter
  userId: StringFilter
}

input AssigneeScalarWhereWithAggregatesInput {
  AND: [AssigneeScalarWhereWithAggregatesInput!]
  NOT: [AssigneeScalarWhereWithAggregatesInput!]
  OR: [AssigneeScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  taskId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input AssigneeUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutAssigneeNestedInput
  user: UserUpdateOneRequiredWithoutAssigneeNestedInput
}

input AssigneeUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input AssigneeUpdateManyWithWhereWithoutTaskInput {
  data: AssigneeUpdateManyMutationInput!
  where: AssigneeScalarWhereInput!
}

input AssigneeUpdateManyWithWhereWithoutUserInput {
  data: AssigneeUpdateManyMutationInput!
  where: AssigneeScalarWhereInput!
}

input AssigneeUpdateManyWithoutTaskNestedInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutTaskInput!]
  create: [AssigneeCreateWithoutTaskInput!]
  createMany: AssigneeCreateManyTaskInputEnvelope
  delete: [AssigneeWhereUniqueInput!]
  deleteMany: [AssigneeScalarWhereInput!]
  disconnect: [AssigneeWhereUniqueInput!]
  set: [AssigneeWhereUniqueInput!]
  update: [AssigneeUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [AssigneeUpdateManyWithWhereWithoutTaskInput!]
  upsert: [AssigneeUpsertWithWhereUniqueWithoutTaskInput!]
}

input AssigneeUpdateManyWithoutUserNestedInput {
  connect: [AssigneeWhereUniqueInput!]
  connectOrCreate: [AssigneeCreateOrConnectWithoutUserInput!]
  create: [AssigneeCreateWithoutUserInput!]
  createMany: AssigneeCreateManyUserInputEnvelope
  delete: [AssigneeWhereUniqueInput!]
  deleteMany: [AssigneeScalarWhereInput!]
  disconnect: [AssigneeWhereUniqueInput!]
  set: [AssigneeWhereUniqueInput!]
  update: [AssigneeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AssigneeUpdateManyWithWhereWithoutUserInput!]
  upsert: [AssigneeUpsertWithWhereUniqueWithoutUserInput!]
}

input AssigneeUpdateWithWhereUniqueWithoutTaskInput {
  data: AssigneeUpdateWithoutTaskInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeUpdateWithWhereUniqueWithoutUserInput {
  data: AssigneeUpdateWithoutUserInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeUpdateWithoutTaskInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAssigneeNestedInput
}

input AssigneeUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  task: TaskUpdateOneRequiredWithoutAssigneeNestedInput
}

input AssigneeUpsertWithWhereUniqueWithoutTaskInput {
  create: AssigneeCreateWithoutTaskInput!
  update: AssigneeUpdateWithoutTaskInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeUpsertWithWhereUniqueWithoutUserInput {
  create: AssigneeCreateWithoutUserInput!
  update: AssigneeUpdateWithoutUserInput!
  where: AssigneeWhereUniqueInput!
}

input AssigneeWhereInput {
  AND: [AssigneeWhereInput!]
  NOT: [AssigneeWhereInput!]
  OR: [AssigneeWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  task: TaskRelationFilter
  taskId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AssigneeWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type Comment {
  content: String!
  createdAt: DateTime!
  id: ID!
  ownerId: User!
  parentId: String
  targetId: Task!
  targetType: CommentTargetType!
  taskId: String!
  updatedAt: DateTime
  userId: String!
}

type CommentCountAggregate {
  _all: Int!
  content: Int!
  createdAt: Int!
  id: Int!
  parentId: Int!
  targetType: Int!
  taskId: Int!
  updatedAt: Int!
  userId: Int!
}

input CommentCountOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  parentId: SortOrder
  targetType: SortOrder
  taskId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CommentCreateInput {
  content: String!
  createdAt: DateTime
  id: String
  ownerId: UserCreateNestedOneWithoutCommentInput!
  parentId: String
  targetId: TaskCreateNestedOneWithoutCommentInput!
  targetType: CommentTargetType!
  updatedAt: DateTime
}

input CommentCreateManyInput {
  content: String!
  createdAt: DateTime
  id: String
  parentId: String
  targetType: CommentTargetType!
  taskId: String!
  updatedAt: DateTime
  userId: String!
}

input CommentCreateManyOwnerIdInput {
  content: String!
  createdAt: DateTime
  id: String
  parentId: String
  targetType: CommentTargetType!
  taskId: String!
  updatedAt: DateTime
}

input CommentCreateManyOwnerIdInputEnvelope {
  data: [CommentCreateManyOwnerIdInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyTargetIdInput {
  content: String!
  createdAt: DateTime
  id: String
  parentId: String
  targetType: CommentTargetType!
  updatedAt: DateTime
  userId: String!
}

input CommentCreateManyTargetIdInputEnvelope {
  data: [CommentCreateManyTargetIdInput!]!
  skipDuplicates: Boolean
}

input CommentCreateNestedManyWithoutOwnerIdInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutOwnerIdInput!]
  create: [CommentCreateWithoutOwnerIdInput!]
  createMany: CommentCreateManyOwnerIdInputEnvelope
}

input CommentCreateNestedManyWithoutTargetIdInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutTargetIdInput!]
  create: [CommentCreateWithoutTargetIdInput!]
  createMany: CommentCreateManyTargetIdInputEnvelope
}

input CommentCreateOrConnectWithoutOwnerIdInput {
  create: CommentCreateWithoutOwnerIdInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateOrConnectWithoutTargetIdInput {
  create: CommentCreateWithoutTargetIdInput!
  where: CommentWhereUniqueInput!
}

input CommentCreateWithoutOwnerIdInput {
  content: String!
  createdAt: DateTime
  id: String
  parentId: String
  targetId: TaskCreateNestedOneWithoutCommentInput!
  targetType: CommentTargetType!
  updatedAt: DateTime
}

input CommentCreateWithoutTargetIdInput {
  content: String!
  createdAt: DateTime
  id: String
  ownerId: UserCreateNestedOneWithoutCommentInput!
  parentId: String
  targetType: CommentTargetType!
  updatedAt: DateTime
}

type CommentGroupBy {
  _count: CommentCountAggregate
  _max: CommentMaxAggregate
  _min: CommentMinAggregate
  content: String!
  createdAt: DateTime!
  id: String!
  parentId: String
  targetType: CommentTargetType!
  taskId: String!
  updatedAt: DateTime
  userId: String!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

type CommentMaxAggregate {
  content: String
  createdAt: DateTime
  id: String
  parentId: String
  targetType: CommentTargetType
  taskId: String
  updatedAt: DateTime
  userId: String
}

input CommentMaxOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  parentId: SortOrder
  targetType: SortOrder
  taskId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type CommentMinAggregate {
  content: String
  createdAt: DateTime
  id: String
  parentId: String
  targetType: CommentTargetType
  taskId: String
  updatedAt: DateTime
  userId: String
}

input CommentMinOrderByAggregateInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  parentId: SortOrder
  targetType: SortOrder
  taskId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByWithAggregationInput {
  _count: CommentCountOrderByAggregateInput
  _max: CommentMaxOrderByAggregateInput
  _min: CommentMinOrderByAggregateInput
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  parentId: SortOrder
  targetType: SortOrder
  taskId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input CommentOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  ownerId: UserOrderByWithRelationInput
  parentId: SortOrder
  targetId: TaskOrderByWithRelationInput
  targetType: SortOrder
  taskId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum CommentScalarFieldEnum {
  content
  createdAt
  id
  parentId
  targetType
  taskId
  updatedAt
  userId
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  parentId: StringNullableFilter
  targetType: EnumCommentTargetTypeFilter
  taskId: StringFilter
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
}

input CommentScalarWhereWithAggregatesInput {
  AND: [CommentScalarWhereWithAggregatesInput!]
  NOT: [CommentScalarWhereWithAggregatesInput!]
  OR: [CommentScalarWhereWithAggregatesInput!]
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  parentId: StringNullableWithAggregatesFilter
  targetType: EnumCommentTargetTypeWithAggregatesFilter
  taskId: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

enum CommentTargetType {
  CREATE
  DELETE
  UPDATE
}

input CommentUpdateInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ownerId: UserUpdateOneRequiredWithoutCommentNestedInput
  parentId: NullableStringFieldUpdateOperationsInput
  targetId: TaskUpdateOneRequiredWithoutCommentNestedInput
  targetType: EnumCommentTargetTypeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyMutationInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentId: NullableStringFieldUpdateOperationsInput
  targetType: EnumCommentTargetTypeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CommentUpdateManyWithWhereWithoutOwnerIdInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithWhereWithoutTargetIdInput {
  data: CommentUpdateManyMutationInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateManyWithoutOwnerIdNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutOwnerIdInput!]
  create: [CommentCreateWithoutOwnerIdInput!]
  createMany: CommentCreateManyOwnerIdInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutOwnerIdInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutOwnerIdInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutOwnerIdInput!]
}

input CommentUpdateManyWithoutTargetIdNestedInput {
  connect: [CommentWhereUniqueInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutTargetIdInput!]
  create: [CommentCreateWithoutTargetIdInput!]
  createMany: CommentCreateManyTargetIdInputEnvelope
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutTargetIdInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutTargetIdInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutTargetIdInput!]
}

input CommentUpdateWithWhereUniqueWithoutOwnerIdInput {
  data: CommentUpdateWithoutOwnerIdInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutTargetIdInput {
  data: CommentUpdateWithoutTargetIdInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithoutOwnerIdInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentId: NullableStringFieldUpdateOperationsInput
  targetId: TaskUpdateOneRequiredWithoutCommentNestedInput
  targetType: EnumCommentTargetTypeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CommentUpdateWithoutTargetIdInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ownerId: UserUpdateOneRequiredWithoutCommentNestedInput
  parentId: NullableStringFieldUpdateOperationsInput
  targetType: EnumCommentTargetTypeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CommentUpsertWithWhereUniqueWithoutOwnerIdInput {
  create: CommentCreateWithoutOwnerIdInput!
  update: CommentUpdateWithoutOwnerIdInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutTargetIdInput {
  create: CommentCreateWithoutTargetIdInput!
  update: CommentUpdateWithoutTargetIdInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  ownerId: UserRelationFilter
  parentId: StringNullableFilter
  targetId: TaskRelationFilter
  targetType: EnumCommentTargetTypeFilter
  taskId: StringFilter
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
}

input CommentWhereUniqueInput {
  id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumActionGroupFieldUpdateOperationsInput {
  set: ActionGroup
}

input EnumActionGroupFilter {
  equals: ActionGroup
  in: [ActionGroup!]
  not: NestedEnumActionGroupFilter
  notIn: [ActionGroup!]
}

input EnumActionGroupWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumActionGroupFilter
  _min: NestedEnumActionGroupFilter
  equals: ActionGroup
  in: [ActionGroup!]
  not: NestedEnumActionGroupWithAggregatesFilter
  notIn: [ActionGroup!]
}

input EnumActionNameFieldUpdateOperationsInput {
  set: ActionName
}

input EnumActionNameFilter {
  equals: ActionName
  in: [ActionName!]
  not: NestedEnumActionNameFilter
  notIn: [ActionName!]
}

input EnumActionNameWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumActionNameFilter
  _min: NestedEnumActionNameFilter
  equals: ActionName
  in: [ActionName!]
  not: NestedEnumActionNameWithAggregatesFilter
  notIn: [ActionName!]
}

input EnumActionTargetTypeFieldUpdateOperationsInput {
  set: ActionTargetType
}

input EnumActionTargetTypeFilter {
  equals: ActionTargetType
  in: [ActionTargetType!]
  not: NestedEnumActionTargetTypeFilter
  notIn: [ActionTargetType!]
}

input EnumActionTargetTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumActionTargetTypeFilter
  _min: NestedEnumActionTargetTypeFilter
  equals: ActionTargetType
  in: [ActionTargetType!]
  not: NestedEnumActionTargetTypeWithAggregatesFilter
  notIn: [ActionTargetType!]
}

input EnumCommentTargetTypeFieldUpdateOperationsInput {
  set: CommentTargetType
}

input EnumCommentTargetTypeFilter {
  equals: CommentTargetType
  in: [CommentTargetType!]
  not: NestedEnumCommentTargetTypeFilter
  notIn: [CommentTargetType!]
}

input EnumCommentTargetTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumCommentTargetTypeFilter
  _min: NestedEnumCommentTargetTypeFilter
  equals: CommentTargetType
  in: [CommentTargetType!]
  not: NestedEnumCommentTargetTypeWithAggregatesFilter
  notIn: [CommentTargetType!]
}

input EnumTaskStateFieldUpdateOperationsInput {
  set: TaskState
}

input EnumTaskStateFilter {
  equals: TaskState
  in: [TaskState!]
  not: NestedEnumTaskStateFilter
  notIn: [TaskState!]
}

input EnumTaskStateWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTaskStateFilter
  _min: NestedEnumTaskStateFilter
  equals: TaskState
  in: [TaskState!]
  not: NestedEnumTaskStateWithAggregatesFilter
  notIn: [TaskState!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedJsonNullableFilter
  _min: NestedJsonNullableFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

type Mutation {
  createManyAction(data: [ActionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAssignee(data: [AssigneeCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyComment(data: [CommentCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyNotification(data: [NotificationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTask(data: [TaskCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAction(data: ActionCreateInput!): Action!
  createOneAssignee(data: AssigneeCreateInput!): Assignee!
  createOneComment(data: CommentCreateInput!): Comment!
  createOneNotification(data: NotificationCreateInput!): Notification!
  createOneTask(data: TaskCreateInput!): Task!
  createOneUser(data: UserCreateInput!): User!
  deleteManyAction(where: ActionWhereInput): AffectedRowsOutput!
  deleteManyAssignee(where: AssigneeWhereInput): AffectedRowsOutput!
  deleteManyComment(where: CommentWhereInput): AffectedRowsOutput!
  deleteManyNotification(where: NotificationWhereInput): AffectedRowsOutput!
  deleteManyTask(where: TaskWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteOneAction(where: ActionWhereUniqueInput!): Action
  deleteOneAssignee(where: AssigneeWhereUniqueInput!): Assignee
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneNotification(where: NotificationWhereUniqueInput!): Notification
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneUser(where: UserWhereUniqueInput!): User
  loginUser(where: UserWhereUniqueInputLogin!): User
  updateManyAction(data: ActionUpdateManyMutationInput!, where: ActionWhereInput): AffectedRowsOutput!
  updateManyAssignee(data: AssigneeUpdateManyMutationInput!, where: AssigneeWhereInput): AffectedRowsOutput!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): AffectedRowsOutput!
  updateManyNotification(data: NotificationUpdateManyMutationInput!, where: NotificationWhereInput): AffectedRowsOutput!
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateOneAction(data: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action
  updateOneAssignee(data: AssigneeUpdateInput!, where: AssigneeWhereUniqueInput!): Assignee
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateOneNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneAction(create: ActionCreateInput!, update: ActionUpdateInput!, where: ActionWhereUniqueInput!): Action!
  upsertOneAssignee(create: AssigneeCreateInput!, update: AssigneeUpdateInput!, where: AssigneeWhereUniqueInput!): Assignee!
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOneNotification(create: NotificationCreateInput!, update: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification!
  upsertOneTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumActionGroupFilter {
  equals: ActionGroup
  in: [ActionGroup!]
  not: NestedEnumActionGroupFilter
  notIn: [ActionGroup!]
}

input NestedEnumActionGroupWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumActionGroupFilter
  _min: NestedEnumActionGroupFilter
  equals: ActionGroup
  in: [ActionGroup!]
  not: NestedEnumActionGroupWithAggregatesFilter
  notIn: [ActionGroup!]
}

input NestedEnumActionNameFilter {
  equals: ActionName
  in: [ActionName!]
  not: NestedEnumActionNameFilter
  notIn: [ActionName!]
}

input NestedEnumActionNameWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumActionNameFilter
  _min: NestedEnumActionNameFilter
  equals: ActionName
  in: [ActionName!]
  not: NestedEnumActionNameWithAggregatesFilter
  notIn: [ActionName!]
}

input NestedEnumActionTargetTypeFilter {
  equals: ActionTargetType
  in: [ActionTargetType!]
  not: NestedEnumActionTargetTypeFilter
  notIn: [ActionTargetType!]
}

input NestedEnumActionTargetTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumActionTargetTypeFilter
  _min: NestedEnumActionTargetTypeFilter
  equals: ActionTargetType
  in: [ActionTargetType!]
  not: NestedEnumActionTargetTypeWithAggregatesFilter
  notIn: [ActionTargetType!]
}

input NestedEnumCommentTargetTypeFilter {
  equals: CommentTargetType
  in: [CommentTargetType!]
  not: NestedEnumCommentTargetTypeFilter
  notIn: [CommentTargetType!]
}

input NestedEnumCommentTargetTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumCommentTargetTypeFilter
  _min: NestedEnumCommentTargetTypeFilter
  equals: CommentTargetType
  in: [CommentTargetType!]
  not: NestedEnumCommentTargetTypeWithAggregatesFilter
  notIn: [CommentTargetType!]
}

input NestedEnumTaskStateFilter {
  equals: TaskState
  in: [TaskState!]
  not: NestedEnumTaskStateFilter
  notIn: [TaskState!]
}

input NestedEnumTaskStateWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumTaskStateFilter
  _min: NestedEnumTaskStateFilter
  equals: TaskState
  in: [TaskState!]
  not: NestedEnumTaskStateWithAggregatesFilter
  notIn: [TaskState!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedJsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Notification {
  action: Action!
  actionId: String!
  id: ID!
  readedAt: DateTime
  user: User!
  userId: String!
}

type NotificationCountAggregate {
  _all: Int!
  actionId: Int!
  id: Int!
  readedAt: Int!
  userId: Int!
}

input NotificationCountOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  readedAt: SortOrder
  userId: SortOrder
}

input NotificationCreateInput {
  action: ActionCreateNestedOneWithoutNotificationInput!
  id: String
  readedAt: DateTime
  user: UserCreateNestedOneWithoutNotificationInput!
}

input NotificationCreateManyActionInput {
  id: String
  readedAt: DateTime
  userId: String!
}

input NotificationCreateManyActionInputEnvelope {
  data: [NotificationCreateManyActionInput!]!
  skipDuplicates: Boolean
}

input NotificationCreateManyInput {
  actionId: String!
  id: String
  readedAt: DateTime
  userId: String!
}

input NotificationCreateManyUserInput {
  actionId: String!
  id: String
  readedAt: DateTime
}

input NotificationCreateManyUserInputEnvelope {
  data: [NotificationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input NotificationCreateNestedManyWithoutActionInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutActionInput!]
  create: [NotificationCreateWithoutActionInput!]
  createMany: NotificationCreateManyActionInputEnvelope
}

input NotificationCreateNestedManyWithoutUserInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
}

input NotificationCreateOrConnectWithoutActionInput {
  create: NotificationCreateWithoutActionInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateOrConnectWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationCreateWithoutActionInput {
  id: String
  readedAt: DateTime
  user: UserCreateNestedOneWithoutNotificationInput!
}

input NotificationCreateWithoutUserInput {
  action: ActionCreateNestedOneWithoutNotificationInput!
  id: String
  readedAt: DateTime
}

type NotificationGroupBy {
  _count: NotificationCountAggregate
  _max: NotificationMaxAggregate
  _min: NotificationMinAggregate
  actionId: String!
  id: String!
  readedAt: DateTime
  userId: String!
}

input NotificationListRelationFilter {
  every: NotificationWhereInput
  none: NotificationWhereInput
  some: NotificationWhereInput
}

type NotificationMaxAggregate {
  actionId: String
  id: String
  readedAt: DateTime
  userId: String
}

input NotificationMaxOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  readedAt: SortOrder
  userId: SortOrder
}

type NotificationMinAggregate {
  actionId: String
  id: String
  readedAt: DateTime
  userId: String
}

input NotificationMinOrderByAggregateInput {
  actionId: SortOrder
  id: SortOrder
  readedAt: SortOrder
  userId: SortOrder
}

input NotificationOrderByRelationAggregateInput {
  _count: SortOrder
}

input NotificationOrderByWithAggregationInput {
  _count: NotificationCountOrderByAggregateInput
  _max: NotificationMaxOrderByAggregateInput
  _min: NotificationMinOrderByAggregateInput
  actionId: SortOrder
  id: SortOrder
  readedAt: SortOrder
  userId: SortOrder
}

input NotificationOrderByWithRelationInput {
  action: ActionOrderByWithRelationInput
  actionId: SortOrder
  id: SortOrder
  readedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum NotificationScalarFieldEnum {
  actionId
  id
  readedAt
  userId
}

input NotificationScalarWhereInput {
  AND: [NotificationScalarWhereInput!]
  NOT: [NotificationScalarWhereInput!]
  OR: [NotificationScalarWhereInput!]
  actionId: StringFilter
  id: StringFilter
  readedAt: DateTimeNullableFilter
  userId: StringFilter
}

input NotificationScalarWhereWithAggregatesInput {
  AND: [NotificationScalarWhereWithAggregatesInput!]
  NOT: [NotificationScalarWhereWithAggregatesInput!]
  OR: [NotificationScalarWhereWithAggregatesInput!]
  actionId: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  readedAt: DateTimeNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input NotificationUpdateInput {
  action: ActionUpdateOneRequiredWithoutNotificationNestedInput
  id: StringFieldUpdateOperationsInput
  readedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutNotificationNestedInput
}

input NotificationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  readedAt: NullableDateTimeFieldUpdateOperationsInput
}

input NotificationUpdateManyWithWhereWithoutActionInput {
  data: NotificationUpdateManyMutationInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateManyWithWhereWithoutUserInput {
  data: NotificationUpdateManyMutationInput!
  where: NotificationScalarWhereInput!
}

input NotificationUpdateManyWithoutActionNestedInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutActionInput!]
  create: [NotificationCreateWithoutActionInput!]
  createMany: NotificationCreateManyActionInputEnvelope
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutActionInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutActionInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutActionInput!]
}

input NotificationUpdateManyWithoutUserNestedInput {
  connect: [NotificationWhereUniqueInput!]
  connectOrCreate: [NotificationCreateOrConnectWithoutUserInput!]
  create: [NotificationCreateWithoutUserInput!]
  createMany: NotificationCreateManyUserInputEnvelope
  delete: [NotificationWhereUniqueInput!]
  deleteMany: [NotificationScalarWhereInput!]
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NotificationUpdateManyWithWhereWithoutUserInput!]
  upsert: [NotificationUpsertWithWhereUniqueWithoutUserInput!]
}

input NotificationUpdateWithWhereUniqueWithoutActionInput {
  data: NotificationUpdateWithoutActionInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithWhereUniqueWithoutUserInput {
  data: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpdateWithoutActionInput {
  id: StringFieldUpdateOperationsInput
  readedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutNotificationNestedInput
}

input NotificationUpdateWithoutUserInput {
  action: ActionUpdateOneRequiredWithoutNotificationNestedInput
  id: StringFieldUpdateOperationsInput
  readedAt: NullableDateTimeFieldUpdateOperationsInput
}

input NotificationUpsertWithWhereUniqueWithoutActionInput {
  create: NotificationCreateWithoutActionInput!
  update: NotificationUpdateWithoutActionInput!
  where: NotificationWhereUniqueInput!
}

input NotificationUpsertWithWhereUniqueWithoutUserInput {
  create: NotificationCreateWithoutUserInput!
  update: NotificationUpdateWithoutUserInput!
  where: NotificationWhereUniqueInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  action: ActionRelationFilter
  actionId: StringFilter
  id: StringFilter
  readedAt: DateTimeNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

input NotificationWhereUniqueInput {
  id: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  action(where: ActionWhereUniqueInput!): Action
  actions(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): [Action!]!
  aggregateAction(cursor: ActionWhereUniqueInput, orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): AggregateAction!
  aggregateAssignee(cursor: AssigneeWhereUniqueInput, orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): AggregateAssignee!
  aggregateComment(cursor: CommentWhereUniqueInput, orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): AggregateComment!
  aggregateNotification(cursor: NotificationWhereUniqueInput, orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): AggregateNotification!
  aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  assignee(where: AssigneeWhereUniqueInput!): Assignee
  assignees(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  findFirstAction(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstActionOrThrow(cursor: ActionWhereUniqueInput, distinct: [ActionScalarFieldEnum!], orderBy: [ActionOrderByWithRelationInput!], skip: Int, take: Int, where: ActionWhereInput): Action
  findFirstAssignee(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): Assignee
  findFirstAssigneeOrThrow(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): Assignee
  findFirstComment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstCommentOrThrow(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): Comment
  findFirstNotification(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification
  findFirstNotificationOrThrow(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): Notification
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstTaskOrThrow(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  getAction(where: ActionWhereUniqueInput!): Action
  getAssignee(where: AssigneeWhereUniqueInput!): Assignee
  getComment(where: CommentWhereUniqueInput!): Comment
  getNotification(where: NotificationWhereUniqueInput!): Notification
  getTask(where: TaskWhereUniqueInput!): Task
  getUser(where: UserWhereUniqueInput!): User
  groupByAction(by: [ActionScalarFieldEnum!]!, having: ActionScalarWhereWithAggregatesInput, orderBy: [ActionOrderByWithAggregationInput!], skip: Int, take: Int, where: ActionWhereInput): [ActionGroupBy!]!
  groupByAssignee(by: [AssigneeScalarFieldEnum!]!, having: AssigneeScalarWhereWithAggregatesInput, orderBy: [AssigneeOrderByWithAggregationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [AssigneeGroupBy!]!
  groupByComment(by: [CommentScalarFieldEnum!]!, having: CommentScalarWhereWithAggregatesInput, orderBy: [CommentOrderByWithAggregationInput!], skip: Int, take: Int, where: CommentWhereInput): [CommentGroupBy!]!
  groupByNotification(by: [NotificationScalarFieldEnum!]!, having: NotificationScalarWhereWithAggregatesInput, orderBy: [NotificationOrderByWithAggregationInput!], skip: Int, take: Int, where: NotificationWhereInput): [NotificationGroupBy!]!
  groupByTask(by: [TaskScalarFieldEnum!]!, having: TaskScalarWhereWithAggregatesInput, orderBy: [TaskOrderByWithAggregationInput!], skip: Int, take: Int, where: TaskWhereInput): [TaskGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  hello: String!
}

type Task {
  Assignee(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  Comment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  _count: TaskCount
  createdAt: DateTime!
  description: String
  dueAt: DateTime
  id: ID!
  ownerId: User!
  state: TaskState!
  title: String!
  updatedAt: DateTime
  userId: String!
}

type TaskCount {
  Assignee: Int!
  Comment: Int!
}

type TaskCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  dueAt: Int!
  id: Int!
  state: Int!
  title: Int!
  updatedAt: Int!
  userId: Int!
}

input TaskCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  dueAt: SortOrder
  id: SortOrder
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskCreateInput {
  Assignee: AssigneeCreateNestedManyWithoutTaskInput
  Comment: CommentCreateNestedManyWithoutTargetIdInput
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  ownerId: UserCreateNestedOneWithoutTaskInput!
  state: TaskState!
  title: String!
  updatedAt: DateTime
}

input TaskCreateManyInput {
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  state: TaskState!
  title: String!
  updatedAt: DateTime
  userId: String!
}

input TaskCreateManyOwnerIdInput {
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  state: TaskState!
  title: String!
  updatedAt: DateTime
}

input TaskCreateManyOwnerIdInputEnvelope {
  data: [TaskCreateManyOwnerIdInput!]!
  skipDuplicates: Boolean
}

input TaskCreateNestedManyWithoutOwnerIdInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutOwnerIdInput!]
  create: [TaskCreateWithoutOwnerIdInput!]
  createMany: TaskCreateManyOwnerIdInputEnvelope
}

input TaskCreateNestedOneWithoutAssigneeInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutAssigneeInput
  create: TaskCreateWithoutAssigneeInput
}

input TaskCreateNestedOneWithoutCommentInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutCommentInput
  create: TaskCreateWithoutCommentInput
}

input TaskCreateOrConnectWithoutAssigneeInput {
  create: TaskCreateWithoutAssigneeInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutCommentInput {
  create: TaskCreateWithoutCommentInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutOwnerIdInput {
  create: TaskCreateWithoutOwnerIdInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutAssigneeInput {
  Comment: CommentCreateNestedManyWithoutTargetIdInput
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  ownerId: UserCreateNestedOneWithoutTaskInput!
  state: TaskState!
  title: String!
  updatedAt: DateTime
}

input TaskCreateWithoutCommentInput {
  Assignee: AssigneeCreateNestedManyWithoutTaskInput
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  ownerId: UserCreateNestedOneWithoutTaskInput!
  state: TaskState!
  title: String!
  updatedAt: DateTime
}

input TaskCreateWithoutOwnerIdInput {
  Assignee: AssigneeCreateNestedManyWithoutTaskInput
  Comment: CommentCreateNestedManyWithoutTargetIdInput
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  state: TaskState!
  title: String!
  updatedAt: DateTime
}

type TaskGroupBy {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  createdAt: DateTime!
  description: String
  dueAt: DateTime
  id: String!
  state: TaskState!
  title: String!
  updatedAt: DateTime
  userId: String!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskMaxAggregate {
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  state: TaskState
  title: String
  updatedAt: DateTime
  userId: String
}

input TaskMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  dueAt: SortOrder
  id: SortOrder
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type TaskMinAggregate {
  createdAt: DateTime
  description: String
  dueAt: DateTime
  id: String
  state: TaskState
  title: String
  updatedAt: DateTime
  userId: String
}

input TaskMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  dueAt: SortOrder
  id: SortOrder
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskOrderByWithAggregationInput {
  _count: TaskCountOrderByAggregateInput
  _max: TaskMaxOrderByAggregateInput
  _min: TaskMinOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrder
  dueAt: SortOrder
  id: SortOrder
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskOrderByWithRelationInput {
  Assignee: AssigneeOrderByRelationAggregateInput
  Comment: CommentOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  dueAt: SortOrder
  id: SortOrder
  ownerId: UserOrderByWithRelationInput
  state: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TaskRelationFilter {
  is: TaskWhereInput
  isNot: TaskWhereInput
}

enum TaskScalarFieldEnum {
  createdAt
  description
  dueAt
  id
  state
  title
  updatedAt
  userId
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  dueAt: DateTimeNullableFilter
  id: StringFilter
  state: EnumTaskStateFilter
  title: StringFilter
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
}

input TaskScalarWhereWithAggregatesInput {
  AND: [TaskScalarWhereWithAggregatesInput!]
  NOT: [TaskScalarWhereWithAggregatesInput!]
  OR: [TaskScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  dueAt: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  state: EnumTaskStateWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

enum TaskState {
  ACTIVE
  CANCEL
  FINISH
  PENDING
}

input TaskUpdateInput {
  Assignee: AssigneeUpdateManyWithoutTaskNestedInput
  Comment: CommentUpdateManyWithoutTargetIdNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ownerId: UserUpdateOneRequiredWithoutTaskNestedInput
  state: EnumTaskStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: EnumTaskStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutOwnerIdInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutOwnerIdNestedInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutOwnerIdInput!]
  create: [TaskCreateWithoutOwnerIdInput!]
  createMany: TaskCreateManyOwnerIdInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutOwnerIdInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutOwnerIdInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutOwnerIdInput!]
}

input TaskUpdateOneRequiredWithoutAssigneeNestedInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutAssigneeInput
  create: TaskCreateWithoutAssigneeInput
  update: TaskUpdateWithoutAssigneeInput
  upsert: TaskUpsertWithoutAssigneeInput
}

input TaskUpdateOneRequiredWithoutCommentNestedInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutCommentInput
  create: TaskCreateWithoutCommentInput
  update: TaskUpdateWithoutCommentInput
  upsert: TaskUpsertWithoutCommentInput
}

input TaskUpdateWithWhereUniqueWithoutOwnerIdInput {
  data: TaskUpdateWithoutOwnerIdInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutAssigneeInput {
  Comment: CommentUpdateManyWithoutTargetIdNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ownerId: UserUpdateOneRequiredWithoutTaskNestedInput
  state: EnumTaskStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TaskUpdateWithoutCommentInput {
  Assignee: AssigneeUpdateManyWithoutTaskNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  ownerId: UserUpdateOneRequiredWithoutTaskNestedInput
  state: EnumTaskStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TaskUpdateWithoutOwnerIdInput {
  Assignee: AssigneeUpdateManyWithoutTaskNestedInput
  Comment: CommentUpdateManyWithoutTargetIdNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  dueAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  state: EnumTaskStateFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TaskUpsertWithWhereUniqueWithoutOwnerIdInput {
  create: TaskCreateWithoutOwnerIdInput!
  update: TaskUpdateWithoutOwnerIdInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutAssigneeInput {
  create: TaskCreateWithoutAssigneeInput!
  update: TaskUpdateWithoutAssigneeInput!
}

input TaskUpsertWithoutCommentInput {
  create: TaskCreateWithoutCommentInput!
  update: TaskUpdateWithoutCommentInput!
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  Assignee: AssigneeListRelationFilter
  Comment: CommentListRelationFilter
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  dueAt: DateTimeNullableFilter
  id: StringFilter
  ownerId: UserRelationFilter
  state: EnumTaskStateFilter
  title: StringFilter
  updatedAt: DateTimeNullableFilter
  userId: StringFilter
}

input TaskWhereUniqueInput {
  id: String
}

type User {
  Assignee(cursor: AssigneeWhereUniqueInput, distinct: [AssigneeScalarFieldEnum!], orderBy: [AssigneeOrderByWithRelationInput!], skip: Int, take: Int, where: AssigneeWhereInput): [Assignee!]!
  Comment(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  Notification(cursor: NotificationWhereUniqueInput, distinct: [NotificationScalarFieldEnum!], orderBy: [NotificationOrderByWithRelationInput!], skip: Int, take: Int, where: NotificationWhereInput): [Notification!]!
  Task(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  _count: UserCount
  active: Boolean!
  createdAt: DateTime!
  email: String!
  id: ID!
  lastSignInAt: DateTime
  name: String!
  password: String!
  passwordDigest: String!
  preferences: JSON
  updatedAt: DateTime
}

type UserCount {
  Assignee: Int!
  Comment: Int!
  Notification: Int!
  Task: Int!
}

type UserCountAggregate {
  _all: Int!
  active: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  lastSignInAt: Int!
  name: Int!
  password: Int!
  passwordDigest: Int!
  preferences: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  lastSignInAt: SortOrder
  name: SortOrder
  password: SortOrder
  passwordDigest: SortOrder
  preferences: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  Assignee: AssigneeCreateNestedManyWithoutUserInput
  Comment: CommentCreateNestedManyWithoutOwnerIdInput
  Notification: NotificationCreateNestedManyWithoutUserInput
  Task: TaskCreateNestedManyWithoutOwnerIdInput
  active: Boolean
  createdAt: DateTime
  email: String!
  id: String
  lastSignInAt: DateTime
  name: String!
  password: String!
  passwordDigest: String!
  preferences: JSON
  updatedAt: DateTime
}

input UserCreateManyInput {
  active: Boolean
  createdAt: DateTime
  email: String!
  id: String
  lastSignInAt: DateTime
  name: String!
  password: String!
  passwordDigest: String!
  preferences: JSON
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutAssigneeInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssigneeInput
  create: UserCreateWithoutAssigneeInput
}

input UserCreateNestedOneWithoutCommentInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentInput
  create: UserCreateWithoutCommentInput
}

input UserCreateNestedOneWithoutNotificationInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationInput
  create: UserCreateWithoutNotificationInput
}

input UserCreateNestedOneWithoutTaskInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTaskInput
  create: UserCreateWithoutTaskInput
}

input UserCreateOrConnectWithoutAssigneeInput {
  create: UserCreateWithoutAssigneeInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCommentInput {
  create: UserCreateWithoutCommentInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutNotificationInput {
  create: UserCreateWithoutNotificationInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTaskInput {
  create: UserCreateWithoutTaskInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAssigneeInput {
  Comment: CommentCreateNestedManyWithoutOwnerIdInput
  Notification: NotificationCreateNestedManyWithoutUserInput
  Task: TaskCreateNestedManyWithoutOwnerIdInput
  active: Boolean
  createdAt: DateTime
  email: String!
  id: String
  lastSignInAt: DateTime
  name: String!
  password: String!
  passwordDigest: String!
  preferences: JSON
  updatedAt: DateTime
}

input UserCreateWithoutCommentInput {
  Assignee: AssigneeCreateNestedManyWithoutUserInput
  Notification: NotificationCreateNestedManyWithoutUserInput
  Task: TaskCreateNestedManyWithoutOwnerIdInput
  active: Boolean
  createdAt: DateTime
  email: String!
  id: String
  lastSignInAt: DateTime
  name: String!
  password: String!
  passwordDigest: String!
  preferences: JSON
  updatedAt: DateTime
}

input UserCreateWithoutNotificationInput {
  Assignee: AssigneeCreateNestedManyWithoutUserInput
  Comment: CommentCreateNestedManyWithoutOwnerIdInput
  Task: TaskCreateNestedManyWithoutOwnerIdInput
  active: Boolean
  createdAt: DateTime
  email: String!
  id: String
  lastSignInAt: DateTime
  name: String!
  password: String!
  passwordDigest: String!
  preferences: JSON
  updatedAt: DateTime
}

input UserCreateWithoutTaskInput {
  Assignee: AssigneeCreateNestedManyWithoutUserInput
  Comment: CommentCreateNestedManyWithoutOwnerIdInput
  Notification: NotificationCreateNestedManyWithoutUserInput
  active: Boolean
  createdAt: DateTime
  email: String!
  id: String
  lastSignInAt: DateTime
  name: String!
  password: String!
  passwordDigest: String!
  preferences: JSON
  updatedAt: DateTime
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  active: Boolean!
  createdAt: DateTime!
  email: String!
  id: String!
  lastSignInAt: DateTime
  name: String!
  password: String!
  passwordDigest: String!
  preferences: JSON
  updatedAt: DateTime
}

type UserMaxAggregate {
  active: Boolean
  createdAt: DateTime
  email: String
  id: String
  lastSignInAt: DateTime
  name: String
  password: String
  passwordDigest: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  lastSignInAt: SortOrder
  name: SortOrder
  password: SortOrder
  passwordDigest: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  active: Boolean
  createdAt: DateTime
  email: String
  id: String
  lastSignInAt: DateTime
  name: String
  password: String
  passwordDigest: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  lastSignInAt: SortOrder
  name: SortOrder
  password: SortOrder
  passwordDigest: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  lastSignInAt: SortOrder
  name: SortOrder
  password: SortOrder
  passwordDigest: SortOrder
  preferences: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  Assignee: AssigneeOrderByRelationAggregateInput
  Comment: CommentOrderByRelationAggregateInput
  Notification: NotificationOrderByRelationAggregateInput
  Task: TaskOrderByRelationAggregateInput
  active: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  lastSignInAt: SortOrder
  name: SortOrder
  password: SortOrder
  passwordDigest: SortOrder
  preferences: SortOrder
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  active
  createdAt
  email
  id
  lastSignInAt
  name
  password
  passwordDigest
  preferences
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  active: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastSignInAt: DateTimeNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  passwordDigest: StringWithAggregatesFilter
  preferences: JsonNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input UserUpdateInput {
  Assignee: AssigneeUpdateManyWithoutUserNestedInput
  Comment: CommentUpdateManyWithoutOwnerIdNestedInput
  Notification: NotificationUpdateManyWithoutUserNestedInput
  Task: TaskUpdateManyWithoutOwnerIdNestedInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastSignInAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordDigest: StringFieldUpdateOperationsInput
  preferences: JSON
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastSignInAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordDigest: StringFieldUpdateOperationsInput
  preferences: JSON
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAssigneeNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAssigneeInput
  create: UserCreateWithoutAssigneeInput
  update: UserUpdateWithoutAssigneeInput
  upsert: UserUpsertWithoutAssigneeInput
}

input UserUpdateOneRequiredWithoutCommentNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCommentInput
  create: UserCreateWithoutCommentInput
  update: UserUpdateWithoutCommentInput
  upsert: UserUpsertWithoutCommentInput
}

input UserUpdateOneRequiredWithoutNotificationNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutNotificationInput
  create: UserCreateWithoutNotificationInput
  update: UserUpdateWithoutNotificationInput
  upsert: UserUpsertWithoutNotificationInput
}

input UserUpdateOneRequiredWithoutTaskNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTaskInput
  create: UserCreateWithoutTaskInput
  update: UserUpdateWithoutTaskInput
  upsert: UserUpsertWithoutTaskInput
}

input UserUpdateWithoutAssigneeInput {
  Comment: CommentUpdateManyWithoutOwnerIdNestedInput
  Notification: NotificationUpdateManyWithoutUserNestedInput
  Task: TaskUpdateManyWithoutOwnerIdNestedInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastSignInAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordDigest: StringFieldUpdateOperationsInput
  preferences: JSON
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutCommentInput {
  Assignee: AssigneeUpdateManyWithoutUserNestedInput
  Notification: NotificationUpdateManyWithoutUserNestedInput
  Task: TaskUpdateManyWithoutOwnerIdNestedInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastSignInAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordDigest: StringFieldUpdateOperationsInput
  preferences: JSON
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutNotificationInput {
  Assignee: AssigneeUpdateManyWithoutUserNestedInput
  Comment: CommentUpdateManyWithoutOwnerIdNestedInput
  Task: TaskUpdateManyWithoutOwnerIdNestedInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastSignInAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordDigest: StringFieldUpdateOperationsInput
  preferences: JSON
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutTaskInput {
  Assignee: AssigneeUpdateManyWithoutUserNestedInput
  Comment: CommentUpdateManyWithoutOwnerIdNestedInput
  Notification: NotificationUpdateManyWithoutUserNestedInput
  active: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastSignInAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  passwordDigest: StringFieldUpdateOperationsInput
  preferences: JSON
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAssigneeInput {
  create: UserCreateWithoutAssigneeInput!
  update: UserUpdateWithoutAssigneeInput!
}

input UserUpsertWithoutCommentInput {
  create: UserCreateWithoutCommentInput!
  update: UserUpdateWithoutCommentInput!
}

input UserUpsertWithoutNotificationInput {
  create: UserCreateWithoutNotificationInput!
  update: UserUpdateWithoutNotificationInput!
}

input UserUpsertWithoutTaskInput {
  create: UserCreateWithoutTaskInput!
  update: UserUpdateWithoutTaskInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  Assignee: AssigneeListRelationFilter
  Comment: CommentListRelationFilter
  NOT: [UserWhereInput!]
  Notification: NotificationListRelationFilter
  OR: [UserWhereInput!]
  Task: TaskListRelationFilter
  active: BoolFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  lastSignInAt: DateTimeNullableFilter
  name: StringFilter
  password: StringFilter
  passwordDigest: StringFilter
  preferences: JsonNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

input UserWhereUniqueInputLogin {
  email: String!
  id: String
  password: String!
}