datasource db {
  provider = "postgresql"
  url      = "postgresql://$(whoami)@localhost:5432/task-manager-graphql?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider        = "typegraphql-prisma"
  output          = "../prisma/generated/type-graphql"
  emitIdAsIDType  = true
  simpleResolvers = true
}

model Action {
  id           String           @id @unique @default(cuid())
  group        ActionGroup
  name         ActionName
  createdAt    DateTime         @default(now())
  targetId     String
  targetType   ActionTargetType
  Notification Notification[]
}

model User {
  id             String         @id @unique @default(cuid())
  name           String
  password       String
  passwordDigest String
  active         Boolean        @default(true)
  preferences    Json?
  email          String         @unique
  lastSignInAt   DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt
  Notification   Notification[]
  Task           Task[]
  Comment        Comment[]
  Assignee       Assignee[]
}

model Notification {
  id       String    @id @unique @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  action   Action    @relation(fields: [actionId], references: [id])
  actionId String
  readedAt DateTime?
}

model Task {
  id          String     @id @unique @default(cuid())
  title       String
  description String?
  ownerId     User       @relation(fields: [userId], references: [id])
  dueAt       DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  state       TaskState
  userId      String
  Comment     Comment[]
  Assignee    Assignee[]
}

model Comment {
  id         String            @id @unique @default(cuid())
  ownerId    User              @relation(fields: [userId], references: [id])
  targetId   Task              @relation(fields: [taskId], references: [id])
  targetType CommentTargetType
  parentId   String?
  content    String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime?         @updatedAt
  userId     String
  taskId     String
}

model Assignee {
  id        String   @id @unique @default(cuid())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

enum ActionGroup {
  COMMENT
  TASK
}

enum ActionName {
  COMMENT_CREATE
  COMMENT_DELETE
  COMMENT_UPDATE
  TASK_CREATE
  TASK_DELETE
  TASK_UPDATE
}

enum ActionTargetType {
  CREATE
  UPDATE
  DELETE
}

enum TaskState {
  ACTIVE
  PENDING
  CANCEL
  FINISH
}

enum CommentTargetType {
  CREATE
  UPDATE
  DELETE
}
